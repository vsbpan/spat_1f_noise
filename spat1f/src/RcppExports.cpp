// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// g_genvonmisesC
NumericVector g_genvonmisesC(NumericVector omega, double kappa1, double kappa2);
RcppExport SEXP _spat1f_g_genvonmisesC(SEXP omegaSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< double >::type kappa2(kappa2SEXP);
    rcpp_result_gen = Rcpp::wrap(g_genvonmisesC(omega, kappa1, kappa2));
    return rcpp_result_gen;
END_RCPP
}
// propose_genvonmises
NumericVector propose_genvonmises(int n, double a, double kappa1, double kappa2);
RcppExport SEXP _spat1f_propose_genvonmises(SEXP nSEXP, SEXP aSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< double >::type kappa2(kappa2SEXP);
    rcpp_result_gen = Rcpp::wrap(propose_genvonmises(n, a, kappa1, kappa2));
    return rcpp_result_gen;
END_RCPP
}
// rgenvonmisesC
NumericVector rgenvonmisesC(int n, double kappa1, double kappa2, int max_try);
RcppExport SEXP _spat1f_rgenvonmisesC(SEXP nSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP max_trySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< double >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< int >::type max_try(max_trySEXP);
    rcpp_result_gen = Rcpp::wrap(rgenvonmisesC(n, kappa1, kappa2, max_try));
    return rcpp_result_gen;
END_RCPP
}
// iouC
double iouC(arma::mat img1, arma::mat img2);
RcppExport SEXP _spat1f_iouC(SEXP img1SEXP, SEXP img2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img1(img1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type img2(img2SEXP);
    rcpp_result_gen = Rcpp::wrap(iouC(img1, img2));
    return rcpp_result_gen;
END_RCPP
}
// mask_insersectC
double mask_insersectC(arma::mat img1, arma::mat img2);
RcppExport SEXP _spat1f_mask_insersectC(SEXP img1SEXP, SEXP img2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img1(img1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type img2(img2SEXP);
    rcpp_result_gen = Rcpp::wrap(mask_insersectC(img1, img2));
    return rcpp_result_gen;
END_RCPP
}
// flatten_xy
NumericVector flatten_xy(NumericVector x, NumericVector y, double max_x, double max_y, double dim_x, double dim_y);
RcppExport SEXP _spat1f_flatten_xy(SEXP xSEXP, SEXP ySEXP, SEXP max_xSEXP, SEXP max_ySEXP, SEXP dim_xSEXP, SEXP dim_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type max_x(max_xSEXP);
    Rcpp::traits::input_parameter< double >::type max_y(max_ySEXP);
    Rcpp::traits::input_parameter< double >::type dim_x(dim_xSEXP);
    Rcpp::traits::input_parameter< double >::type dim_y(dim_ySEXP);
    rcpp_result_gen = Rcpp::wrap(flatten_xy(x, y, max_x, max_y, dim_x, dim_y));
    return rcpp_result_gen;
END_RCPP
}
// read_valueC
NumericVector read_valueC(NumericVector x, NumericVector y, double max_x, double max_y, NumericMatrix img);
RcppExport SEXP _spat1f_read_valueC(SEXP xSEXP, SEXP ySEXP, SEXP max_xSEXP, SEXP max_ySEXP, SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type max_x(max_xSEXP);
    Rcpp::traits::input_parameter< double >::type max_y(max_ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(read_valueC(x, y, max_x, max_y, img));
    return rcpp_result_gen;
END_RCPP
}
// pick_new_theta_xy
List pick_new_theta_xy(List sl_rand, List ta_rand, int index, int n, double direction_start, double x_start, double y_start);
RcppExport SEXP _spat1f_pick_new_theta_xy(SEXP sl_randSEXP, SEXP ta_randSEXP, SEXP indexSEXP, SEXP nSEXP, SEXP direction_startSEXP, SEXP x_startSEXP, SEXP y_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sl_rand(sl_randSEXP);
    Rcpp::traits::input_parameter< List >::type ta_rand(ta_randSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type direction_start(direction_startSEXP);
    Rcpp::traits::input_parameter< double >::type x_start(x_startSEXP);
    Rcpp::traits::input_parameter< double >::type y_start(y_startSEXP);
    rcpp_result_gen = Rcpp::wrap(pick_new_theta_xy(sl_rand, ta_rand, index, n, direction_start, x_start, y_start));
    return rcpp_result_gen;
END_RCPP
}
// add_random_stepsC
DataFrame add_random_stepsC(int n_draws, double x_start, double y_start, double direction_start, List sl_rand, List ta_rand, int index, double rss_coef_exp, NumericVector ref_grid_flat);
RcppExport SEXP _spat1f_add_random_stepsC(SEXP n_drawsSEXP, SEXP x_startSEXP, SEXP y_startSEXP, SEXP direction_startSEXP, SEXP sl_randSEXP, SEXP ta_randSEXP, SEXP indexSEXP, SEXP rss_coef_expSEXP, SEXP ref_grid_flatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_draws(n_drawsSEXP);
    Rcpp::traits::input_parameter< double >::type x_start(x_startSEXP);
    Rcpp::traits::input_parameter< double >::type y_start(y_startSEXP);
    Rcpp::traits::input_parameter< double >::type direction_start(direction_startSEXP);
    Rcpp::traits::input_parameter< List >::type sl_rand(sl_randSEXP);
    Rcpp::traits::input_parameter< List >::type ta_rand(ta_randSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< double >::type rss_coef_exp(rss_coef_expSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_grid_flat(ref_grid_flatSEXP);
    rcpp_result_gen = Rcpp::wrap(add_random_stepsC(n_draws, x_start, y_start, direction_start, sl_rand, ta_rand, index, rss_coef_exp, ref_grid_flat));
    return rcpp_result_gen;
END_RCPP
}
// add_random_steps_iterateC
DataFrame add_random_steps_iterateC(int n, int n_draws, double x_start, double y_start, double direction_start, double diet_start, List sl_rand, List ta_rand, double rss_coef, NumericVector ref_grid_flat);
RcppExport SEXP _spat1f_add_random_steps_iterateC(SEXP nSEXP, SEXP n_drawsSEXP, SEXP x_startSEXP, SEXP y_startSEXP, SEXP direction_startSEXP, SEXP diet_startSEXP, SEXP sl_randSEXP, SEXP ta_randSEXP, SEXP rss_coefSEXP, SEXP ref_grid_flatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_draws(n_drawsSEXP);
    Rcpp::traits::input_parameter< double >::type x_start(x_startSEXP);
    Rcpp::traits::input_parameter< double >::type y_start(y_startSEXP);
    Rcpp::traits::input_parameter< double >::type direction_start(direction_startSEXP);
    Rcpp::traits::input_parameter< double >::type diet_start(diet_startSEXP);
    Rcpp::traits::input_parameter< List >::type sl_rand(sl_randSEXP);
    Rcpp::traits::input_parameter< List >::type ta_rand(ta_randSEXP);
    Rcpp::traits::input_parameter< double >::type rss_coef(rss_coefSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_grid_flat(ref_grid_flatSEXP);
    rcpp_result_gen = Rcpp::wrap(add_random_steps_iterateC(n, n_draws, x_start, y_start, direction_start, diet_start, sl_rand, ta_rand, rss_coef, ref_grid_flat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spat1f_g_genvonmisesC", (DL_FUNC) &_spat1f_g_genvonmisesC, 3},
    {"_spat1f_propose_genvonmises", (DL_FUNC) &_spat1f_propose_genvonmises, 4},
    {"_spat1f_rgenvonmisesC", (DL_FUNC) &_spat1f_rgenvonmisesC, 4},
    {"_spat1f_iouC", (DL_FUNC) &_spat1f_iouC, 2},
    {"_spat1f_mask_insersectC", (DL_FUNC) &_spat1f_mask_insersectC, 2},
    {"_spat1f_flatten_xy", (DL_FUNC) &_spat1f_flatten_xy, 6},
    {"_spat1f_read_valueC", (DL_FUNC) &_spat1f_read_valueC, 5},
    {"_spat1f_pick_new_theta_xy", (DL_FUNC) &_spat1f_pick_new_theta_xy, 7},
    {"_spat1f_add_random_stepsC", (DL_FUNC) &_spat1f_add_random_stepsC, 9},
    {"_spat1f_add_random_steps_iterateC", (DL_FUNC) &_spat1f_add_random_steps_iterateC, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_spat1f(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
